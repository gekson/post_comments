[opcache]

;enable the opchache
opcache.enable=1

;Basically put, how often (in seconds) should the code cache expire and check if your code has changed. 0 means it
;checks your PHP code every single request (which adds lots of stat syscalls). Set it to 0 in your development
;environment. Production doesn't matter because of the next setting.
opcache.revalidate_freq=0

;When this is enabled, PHP will check the file timestamp per your opcache.revalidate_freq value.
;When it's disabled, opcache.revaliate_freq is ignored and PHP files are NEVER checked for updated code. So, if you
;modify your code, the changes won't actually run until you restart or reload PHP (you force a reload with kill -SIGUSR2).
;Yes, this is a pain in the ass, but you should use it. Why? While you're updating or deplying code, new code files
;can get mixed with old ones— the results are unknown. It's unsafe as hell.
;To disable the validation just se to 0.
; For production set it to 0, for dev set it to 1.
opcache.validate_timestamps=${PHP_OPCACHE_VALIDATE_TIMESTAMPS}

;Controls how many PHP files, at most, can be held in memory at once. It's important that your project has LESS FILES
;than whatever you set this at. My codebase has ~6000 files, so I use the prime number 7963 for maxacceleratedfiles.
;You can run "find . -type f -print | grep php | wc -l" to quickly calculate the number of files in your codebase.
opcache.max_accelerated_files=${PHP_OPCACHE_MAX_ACCELERATED_FILES}

;MEANS, but who knows what to set it at? Is 32 too much? Too little? Who the heck knows, nothing comes up on Google, so
;you just go with your gut.
;But what about when your gut is wrong? Do you want to bet your uptime on a guess?
;Not me.
;I have a bad habit of researching like a maniac. It's awful because I'll start off googling some weird setting and
;find myself digging through PHP source code three hours later.
;Instead of letting this knowledge go to waste, I want to share it with you. I had to spend the time figuring out the
;best REAL WORLD settings for Zend Optimizer.
;These settings are straight from my php.ini file from one of my apps that does 117 million HTTP requests per day.
;I'll explain what each one does and why it's important so you can tweak it for your setup.
opcache.memory_consumption=${PHP_OPCACHE_MEMORY_CONSUMPTION}

; Define the maximum memory the opcache can "waste", this is not means the opcache it'll waste the memory itself
; but give some range of security memory that it can use for extreme operations.
opcache.max_wasted_percentage=${PHP_OPCACHE_MAX_WASTED_PERCENTAGE}

;A pretty neat setting with like 0 documentation. PHP uses a technique called string interning to improve performance—
;so, for example, if you have the string "foobar" 1000 times in your code, internally PHP will store 1 immutable
;variable for this string and just use a pointer to it for the other 999 times you use it. Cool. This setting takes it
;to the next level— instead of having a pool of these immutable string for each SINGLE php-fpm process, this setting
;shares it across ALL of your php-fpm processes. It saves memory and improves performance,
;especially in big applications.
;The value is set in megabytes, so set it to "16" for 16MB. The default is low, 4MB.
opcache.interned_strings_buffer=64

;Another interesting setting with no useful documentation. "Allows for faster shutdown". Oh okay.
;Like that helps me. What this actually does is provide a faster mechanism for calling the deconstructors in your
;code at the end of a single request to speed up the response and recycle php workers so
;they're ready for the next incoming request faster. Set it to 1 and turn it on.
opcache.fast_shutdown=1

opcache.enable_file_override=${PHP_OPCACHE_FILE_OVERRIDE}

;This will preserve comments in your script, I recommend to keep this enabled, as some libraries depend on it, and I couldn’t find any benefits from disabling it (except from saving a few bytes RAM).
opcache.save_comments=1
